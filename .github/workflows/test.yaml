name: Test

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  release:
    types: [published]


env:
  GITHUB_USERNAME: ${{ github.actor }}
  GITHUB_TOKEN: ${{ github.token }}
  DOCKER_IMAGE: "ghcr.io/${{ github.repository }}:${{ github.ref_name }}"

jobs:

  build:
    uses: ./.github/workflows/build.yaml

  # ---------------------------------------------------------------------------
  test:

    needs: build
    if: ${{ always() }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # linux
          - arch: x86_64-unknown-linux-musl
            os: ubuntu-latest
            binary: rebar
          # windows
          - arch: x86_64-pc-windows-gnu
            os: windows-latest
            binary: rebar.exe
          # macOS
          - arch: x86_64-apple-darwin
            os: macos-latest
            binary: rebar
          # docker
          - arch: docker
            os: ubuntu-latest
            binary: rebar

    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      # ------------------------------------------------------------------------
      # How we execute the program depends on the architecture

      - name: set run command (windows)
        if: matrix.os == 'windows-latest'
        run: echo RUN_CMD=".\${{ matrix.binary }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: set run command (docker)
        if: matrix.arch == 'docker'
        run: echo RUN_CMD="docker run $DOCKER_IMAGE ${{ matrix.binary }}" >> $GITHUB_ENV

      - name: set run command (linux, mac)
        if: matrix.arch == 'x86_64-unknown-linux-musl' || matrix.arch == 'x86_64-apple-darwin'
        run: echo RUN_CMD="./${{ matrix.binary }}" >> $GITHUB_ENV

      - name: check run command
        run: echo ${{ env.RUN_CMD }}

      # ------------------------------------------------------------------------
      # Install

      - name: download build output
        uses: actions/download-artifact@v3
        with:
          name: rebar-${{ matrix.arch }}
          path: target/${{ matrix.arch }}/release

      - name: install
        if: ${{ matrix.arch != 'docker' }}
        run: |
          chmod +x target/${{ matrix.arch }}/release/${{ matrix.binary }}
          cp target/${{ matrix.arch }}/release/${{ matrix.binary }} .
          ${{ env.RUN_CMD }} --help

      - name: load docker image
        if:  matrix.arch == 'docker'
        run: |
          docker load --input rebar.tar

      - name: dataset list
        run: |
          ${{ env.RUN_CMD }} dataset list

      - name: dataset download
        run: |
          ${{ env.RUN_CMD }} dataset download --name sars-cov-2 --tag 2023-11-17 --output-dir dataset/sars-cov-2/2023-11-17

      - name: example 1
        run: |
          ${{ env.RUN_CMD }} run  --dataset-dir dataset/sars-cov-2/2023-11-17 --output-dir output/example1 --populations "AY.4.2*,BA.5.2,XBC.1.6*,XBB.1.5.1,XBL"
          ${{ env.RUN_CMD }} plot --dataset-dir dataset/sars-cov-2/2023-11-17 --output-dir output/example1

      - name: example 2
        run: |
          ${{ env.RUN_CMD }} run  --dataset-dir dataset/sars-cov-2/2023-11-17 --output-dir output/example2 --alignment data/example2.fasta
          ${{ env.RUN_CMD }} plot --dataset-dir dataset/sars-cov-2/2023-11-17 --output-dir output/example2

      - name: toy1
        run: |
          ${{ env.RUN_CMD }} run  --dataset-dir dataset/toy1 --output-dir output/toy1 --populations "*" --mask 0,0 --min-length 1
          ${{ env.RUN_CMD }} plot --dataset-dir dataset/toy1 --output-dir output/toy1

      - name: upload output
        uses: actions/upload-artifact@v3
        with:
          name: output-${{ matrix.arch }}
          path: output
          if-no-files-found: error
          retention-days: 7
